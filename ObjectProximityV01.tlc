%% Copyright (c) 2018-2021 rFpro Limited, All Rights Reserved.
%%
%% NOTICE:  All information contained herein is, and remains the property of rFpro. The intellectual and technical concepts contained
%% herein are proprietary to rFpro and may be covered by U.S. and foreign patents, patents in process, and are protected by trade secret or copyright law.
%% Dissemination of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained from rFpro.
%%
%% The copyright notice above does not evidence any actual or intended publication or disclosure of this source code, which includes information that is confidential
%% and/or proprietary, and is a trade secret, of rFpro.  ANY REPRODUCTION, DISTRIBUTION, PUBLIC PERFORMANCE, OR PUBLIC DISPLAY OF THIS SOURCE CODE
%% WITHOUT THE EXPRESS WRITTEN CONSENT OF RFPRO IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE LAWS AND INTERNATIONAL TREATIES.
%% THE RECEIPT OR POSSESSION OF THIS SOURCE CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS TO REPRODUCE,
%% DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT MAY DESCRIBE, IN WHOLE OR IN PART.

%implements ObjectProximityV01 "C"

%function BlockTypeSetup(block, system) Output
  %<LibAddToCommonIncludes("InternalsPluginExtras.hpp")>
  %% Put external variable reference in Model_private.h
  %openfile buffer
  extern std::vector<ProximityQueryPointDefnV01> simulinkProximityDef;
  extern std::vector<ProximityQueryPointV01> simulinkProximityData;
  %closefile buffer
  %<LibCacheFunctionPrototype(buffer)>
%endfunction


%function Start(block, system) Output
  %assign dims = LibBlockParameterDimensions(P1)
  const uint32_t NUM_POINTS = %<dims[1]>;
  uint32_T point;
  ProximityQueryPointDefnV01 probe;

  simulinkProximityDef.clear();
  simulinkProximityDef.resize(NUM_POINTS);
  for (point = 0; point < NUM_POINTS; ++point)
  {
    probe.mPos.x = %<LibBlockMatrixParameter(P1,"","",0,"point","",0)>;
    probe.mPos.y = %<LibBlockMatrixParameter(P1,"","",1,"point","",0)>;
    probe.mPos.z = %<LibBlockMatrixParameter(P1,"","",2,"point","",0)>;
    probe.mRay.x = %<LibBlockMatrixParameter(P2,"","",0,"point","",0)>;
    probe.mRay.y = %<LibBlockMatrixParameter(P2,"","",1,"point","",0)>;
    probe.mRay.z = %<LibBlockMatrixParameter(P2,"","",2,"point","",0)>;
    simulinkProximityDef[point] = probe;
  }
%endfunction


%function Outputs(block, system) Output
  %assign dims = LibBlockParameterDimensions(P1)
  const uint32_t NUM_POINTS = %<dims[1]>;
  int32_T numResultsAvailable = simulinkProximityData.size();
  int32_T numResults = NUM_POINTS < numResultsAvailable ? NUM_POINTS : numResultsAvailable;
  int32_T point;

  for (point = 0; point < numResults; ++point)
  {
    %<LibBlockOutputSignal(0, "point", "", 0)> = simulinkProximityData[point].mValid;
    %<LibBlockOutputSignal(1, "point", "", 0)> = simulinkProximityData[point].mRange;

    %<LibBlockOutputSignal(2, "3*point", "", 0)> = simulinkProximityData[point].mNormal.x;
    %<LibBlockOutputSignal(2, "3*point+1", "", 0)> = simulinkProximityData[point].mNormal.y;
    %<LibBlockOutputSignal(2, "3*point+2", "", 0)> = simulinkProximityData[point].mNormal.z;

    memcpy(%<LibBlockOutputSignalAddr(3, "20*point", "", 0)>, simulinkProximityData[point].mInstanceName, sizeof(simulinkProximityData[point].mInstanceName));
    memcpy(%<LibBlockOutputSignalAddr(4, "20*point", "", 0)>, simulinkProximityData[point].mMaterialName, sizeof(simulinkProximityData[point].mMaterialName));
  }

  %% If we are missing points, for some reason, set the valid flags to false
  for (point = numResultsAvailable; point < NUM_POINTS; ++point)
  {
    %<LibBlockOutputSignal(0, "point", "", 0)> = false;
  }

%endfunction
