%% Copyright (c) 2020 rFpro Limited, All Rights Reserved.
%%
%% NOTICE:  All information contained herein is, and remains the property of rFpro. The intellectual and technical concepts contained
%% herein are proprietary to rFpro and may be covered by U.S. and foreign patents, patents in process, and are protected by trade secret or copyright law.
%% Dissemination of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained from rFpro.
%%
%% The copyright notice above does not evidence any actual or intended publication or disclosure of this source code, which includes information that is confidential
%% and/or proprietary, and is a trade secret, of rFpro.  ANY REPRODUCTION, DISTRIBUTION, PUBLIC PERFORMANCE, OR PUBLIC DISPLAY OF THIS SOURCE CODE
%% WITHOUT THE EXPRESS WRITTEN CONSENT OF RFPRO IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE LAWS AND INTERNATIONAL TREATIES.
%% THE RECEIPT OR POSSESSION OF THIS SOURCE CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS TO REPRODUCE,
%% DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT MAY DESCRIBE, IN WHOLE OR IN PART.

%implements ModelInputV01 "C"

%function BlockTypeSetup(block, system) Output
  %<LibAddToCommonIncludes("InternalsPlugin.hpp")>
  %openfile externs
    extern PhysicsInputV01 simulinkInput;
  %closefile externs
  %<LibCacheExtern(externs)>
%endfunction

%function Outputs(block, system) Output
  int capOpponents = 40;
  
  // weather
  %<LibBlockOutputSignal(0, "", "", 0)> = simulinkInput.mAirDensity;
  %<LibBlockOutputSignal(1, "", "", 0)> = simulinkInput.mHumidity;
  %<LibBlockOutputSignal(2, "", "", 0)> = simulinkInput.mPressure;
  %<LibBlockOutputSignal(3, "", "", 0)> = simulinkInput.mAmbientTemp;
  %<LibBlockOutputSignal(4, "", "", 0)> = simulinkInput.mTrackTemp;
  %<LibBlockOutputSignal(5, "", "", 0)> = simulinkInput.mWind[0];
  %<LibBlockOutputSignal(5, "", "", 1)> = simulinkInput.mWind[1];
  %<LibBlockOutputSignal(5, "", "", 2)> = simulinkInput.mWind[2];
  
  %<LibBlockOutputSignal( 6, "", "", 0)> = simulinkInput.mCollision;
  %<LibBlockOutputSignal( 7, "", "", 0)> = simulinkInput.mCollisionExitVector[0];
  %<LibBlockOutputSignal( 7, "", "", 1)> = simulinkInput.mCollisionExitVector[1];
  %<LibBlockOutputSignal( 7, "", "", 2)> = simulinkInput.mCollisionExitVector[2];
  %<LibBlockOutputSignal( 8, "", "", 0)> = simulinkInput.mCollisionForce[0];
  %<LibBlockOutputSignal( 8, "", "", 1)> = simulinkInput.mCollisionForce[1];
  %<LibBlockOutputSignal( 8, "", "", 2)> = simulinkInput.mCollisionForce[2];
  %<LibBlockOutputSignal( 9, "", "", 0)> = simulinkInput.mCollisionTorque[0];
  %<LibBlockOutputSignal( 9, "", "", 1)> = simulinkInput.mCollisionTorque[1];
  %<LibBlockOutputSignal( 9, "", "", 2)> = simulinkInput.mCollisionTorque[2];

  // miscellaneous
  %<LibBlockOutputSignal(10, "", "", 0)> = simulinkInput.mPitting;
  %<LibBlockOutputSignal(11, "", "", 0)> = simulinkInput.mBeacon[0];
  %<LibBlockOutputSignal(11, "", "", 1)> = simulinkInput.mBeacon[1];
  %<LibBlockOutputSignal(11, "", "", 2)> = simulinkInput.mBeacon[2];
  %<LibBlockOutputSignal(11, "", "", 3)> = simulinkInput.mBeacon[3];
  %<LibBlockOutputSignal(11, "", "", 4)> = simulinkInput.mBeacon[4];
  %<LibBlockOutputSignal(11, "", "", 5)> = simulinkInput.mBeacon[5];

  // internal state
 %<LibBlockOutputSignal(12, "", "", 0)> = simulinkInput.mInternalState.mPos[0];
 %<LibBlockOutputSignal(12, "", "", 1)> = simulinkInput.mInternalState.mPos[1];
 %<LibBlockOutputSignal(12, "", "", 2)> = simulinkInput.mInternalState.mPos[2];

 %<LibBlockOutputSignal(13, "", "", 0)> = simulinkInput.mInternalState.mOri[0][0];
 %<LibBlockOutputSignal(13, "", "", 1)> = simulinkInput.mInternalState.mOri[0][1];
 %<LibBlockOutputSignal(13, "", "", 2)> = simulinkInput.mInternalState.mOri[0][2];
 %<LibBlockOutputSignal(13, "", "", 3)> = simulinkInput.mInternalState.mOri[1][0];
 %<LibBlockOutputSignal(13, "", "", 4)> = simulinkInput.mInternalState.mOri[1][1];
 %<LibBlockOutputSignal(13, "", "", 5)> = simulinkInput.mInternalState.mOri[1][2];
 %<LibBlockOutputSignal(13, "", "", 6)> = simulinkInput.mInternalState.mOri[2][0];
 %<LibBlockOutputSignal(13, "", "", 7)> = simulinkInput.mInternalState.mOri[2][1];
 %<LibBlockOutputSignal(13, "", "", 8)> = simulinkInput.mInternalState.mOri[2][2];

 %<LibBlockOutputSignal(14, "", "", 0)> = simulinkInput.mInternalState.mVel[0];
 %<LibBlockOutputSignal(14, "", "", 1)> = simulinkInput.mInternalState.mVel[1];
 %<LibBlockOutputSignal(14, "", "", 2)> = simulinkInput.mInternalState.mVel[2];

 %<LibBlockOutputSignal(15, "", "", 0)> = simulinkInput.mInternalState.mRot[0];
 %<LibBlockOutputSignal(15, "", "", 1)> = simulinkInput.mInternalState.mRot[1];
 %<LibBlockOutputSignal(15, "", "", 2)> = simulinkInput.mInternalState.mRot[2];

  // Driver Inputs
  %<LibBlockOutputSignal(16, "", "", 0)> = simulinkInput.mSteering;
  %<LibBlockOutputSignal(17, "", "", 0)> = simulinkInput.mThrottle;
  %<LibBlockOutputSignal(18, "", "", 0)> = simulinkInput.mHandbrake;
  %<LibBlockOutputSignal(19, "", "", 0)> = simulinkInput.mBrakes;
  %<LibBlockOutputSignal(20, "", "", 0)> = simulinkInput.mClutch;
  %<LibBlockOutputSignal(21, "", "", 0)> = simulinkInput.mPowerDemand;
  %<LibBlockOutputSignal(22, "", "", 0)> = simulinkInput.mDirectManualShift;
  %<LibBlockOutputSignal(23, "", "", 0)> = simulinkInput.mShiftUp;
  %<LibBlockOutputSignal(24, "", "", 0)> = simulinkInput.mShiftDown;
  %<LibBlockOutputSignal(25, "", "", 0)> = simulinkInput.mShiftToNeutral;
  %<LibBlockOutputSignal(26, "", "", 0)> = simulinkInput.mTCOverride;
  %<LibBlockOutputSignal(27, "", "", 0)> = simulinkInput.mLaunchControl;

  if (capOpponents > simulinkInput.mNumOpponents)
    capOpponents = simulinkInput.mNumOpponents;
  %<LibBlockOutputSignal(28, "", "", 0)> = capOpponents;
  for (int t=0; t < capOpponents; t++)
  {
    %<LibBlockOutputSignal(29, "t", "", 0)> = simulinkInput.mOpponentState[t].mID;

    %<LibBlockOutputSignal(30, "t*3+0", "", 0)> = simulinkInput.mOpponentState[t].mPos[0];
    %<LibBlockOutputSignal(30, "t*3+1", "", 0)> = simulinkInput.mOpponentState[t].mPos[1];
    %<LibBlockOutputSignal(30, "t*3+2", "", 0)> = simulinkInput.mOpponentState[t].mPos[2];

    %<LibBlockOutputSignal(31, "t*9+0", "", 0)> = simulinkInput.mOpponentState[t].mOri[0][0];
    %<LibBlockOutputSignal(31, "t*9+1", "", 0)> = simulinkInput.mOpponentState[t].mOri[0][1];
    %<LibBlockOutputSignal(31, "t*9+2", "", 0)> = simulinkInput.mOpponentState[t].mOri[0][2];
    %<LibBlockOutputSignal(31, "t*9+3", "", 0)> = simulinkInput.mOpponentState[t].mOri[1][0];
    %<LibBlockOutputSignal(31, "t*9+4", "", 0)> = simulinkInput.mOpponentState[t].mOri[1][1];
    %<LibBlockOutputSignal(31, "t*9+5", "", 0)> = simulinkInput.mOpponentState[t].mOri[1][2];
    %<LibBlockOutputSignal(31, "t*9+6", "", 0)> = simulinkInput.mOpponentState[t].mOri[2][0];
    %<LibBlockOutputSignal(31, "t*9+7", "", 0)> = simulinkInput.mOpponentState[t].mOri[2][1];
    %<LibBlockOutputSignal(31, "t*9+8", "", 0)> = simulinkInput.mOpponentState[t].mOri[2][2];

    %<LibBlockOutputSignal(32, "t*3+0", "", 0)> = simulinkInput.mOpponentState[t].mVel[0];
    %<LibBlockOutputSignal(32, "t*3+1", "", 0)> = simulinkInput.mOpponentState[t].mVel[1];
    %<LibBlockOutputSignal(32, "t*3+2", "", 0)> = simulinkInput.mOpponentState[t].mVel[2];

    %<LibBlockOutputSignal(33, "t*3+0", "", 0)> = simulinkInput.mOpponentState[t].mRot[0];
    %<LibBlockOutputSignal(33, "t*3+1", "", 0)> = simulinkInput.mOpponentState[t].mRot[1];
    %<LibBlockOutputSignal(33, "t*3+2", "", 0)> = simulinkInput.mOpponentState[t].mRot[2];
  }

%endfunction
