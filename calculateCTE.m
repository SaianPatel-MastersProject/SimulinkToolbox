function CTE  = calculateCTE(currentPosition, currentOrientation)

    % AIW_data = readtable("path_with_target_speeds.csv");
    % 
    % AIW_data = load('AIW_data.mat');
    % AIW_data = AIW_data.AIW_data;

    xRef = [-293.551;-288.888;-284.234;-279.706;-275.116;-270.658;-266.15;-261.572;-257.07;-252.512;-248.118;-243.621;-238.948;-234.252;-229.748;-225.108;-220.448;-215.821;-211.368;-206.689;-202.019;-197.514;-192.734;-188.173;-183.409;-178.862;-174.111;-169.518;-165.028;-160.426;-155.615;-150.805;-145.972;-141.051;-136.113;-131.172;-126.225;-121.479;-116.839;-112.231;-107.63;-103.293;-99.172;-95.29000000000001;-91.904;-88.824;-86.108;-83.89400000000001;-82.10899999999999;-80.684;-79.68300000000001;-79.193;-79.18300000000001;-79.658;-80.649;-82.20099999999999;-84.31699999999999;-86.785;-89.604;-92.767;-96.381;-100.164;-103.811;-107.724;-111.675;-115.986;-120.236;-124.445;-128.896;-133.178;-137.479;-142.074;-146.662;-151.29;-155.903;-160.379;-165.098;-169.788;-174.364;-179.038;-183.745;-188.228;-192.718;-197.269;-202.011;-206.683;-211.409;-216.257;-221.024;-225.706;-230.57;-235.133;-239.716;-244.441;-249.136;-254.059;-258.81;-263.396;-267.885;-272.623;-277.325;-282.002;-286.667;-291.335;-296.087;-300.986;-305.893;-310.844;-315.998;-321.066;-326.146;-330.974;-335.709;-340.226;-344.401;-348.189;-351.562;-354.727;-357.385;-359.545;-361.269;-362.446;-363.009;-362.989;-362.43;-361.461;-360.141;-358.422;-356.517;-354.364;-351.832;-348.878;-345.485;-341.805;-337.808;-333.74;-329.372;-324.962;-320.24;-315.421;-310.547;-305.622;-300.983;-295.871;-293.551];
    yRef = [120.76;118.825;116.842;114.853;112.781;110.706;108.557;106.337;104.119;101.864;99.68000000000001;97.468;95.202;92.95399999999999;90.816;88.64100000000001;86.476;84.33799999999999;82.28700000000001;80.133;77.992;75.929;73.742;71.66;69.489;67.423;65.215;63.032;60.983;59.012;57.162;55.579;54.254;53.207;52.477;52.114;52.128;52.535;53.339;54.576;56.315;58.48;61.098;64.18600000000001;67.51300000000001;71.221;75.244;79.294;83.43600000000001;87.85599999999999;92.52200000000001;97.104;101.631;106.185;110.719;115.231;119.589;123.497;127.058;130.363;133.534;136.478;139.166;141.952;144.692;147.648;150.455;153.125;155.837;158.328;160.715;163.155;165.494;167.811;170.108;172.314;174.579;176.754;178.835;180.936;183.034;185.024;187.019;189.059;191.192;193.299;195.435;197.628;199.787;201.908;204.114;206.183;208.261;210.4;212.524;214.752;216.904;218.983;221.024;223.267;225.473;227.568;229.528;231.326;232.933;234.293;235.281;235.855;235.952;235.548;234.588;233.119;231.095;228.573;225.646;222.369;218.821;214.936;210.919;206.774;202.29;197.492;192.641;187.711;182.837;178.179;173.61;168.926;164.401;160.123;155.893;151.763;147.807;144.2;140.924;138.089;135.47;133.183;131.051;129.127;127.306;125.535;123.749;121.711;120.76];
    vRef = [70;66.2941526152573;65.4883647028928;66.0806810173367;65.26896339678061;66.38411146223039;67.3958387030261;67.44592545744069;69.329950287306;69.1882758068728;68.3399139325445;67.8708656511444;68.0298306929415;68.5896149793253;68.1152248297563;68.63555972456859;69.1481986236618;69.4599993837293;69.9252960878933;69.3639988911179;69.8107068477354;69.8743668318338;69.619725001083;69.7562053585058;69.5126574618636;66.8719643020907;66.5091815156028;63.7827888901593;61.4788133988011;57.7449016550197;53.9974942907394;53.6605244902812;52.084372378414;50.7040292465574;48.3551543600423;47.8757137938598;45.44230021571;45.0547902412987;44.8125277874768;44.1542423154531;42.7562947109367;43.0237595384218;42.9484526008551;41.4257959721631;43.2571984505023;43.5174230788054;42.7218682523597;42.8210740638573;43.8798605976025;43.3680625384228;41.050532484812;41.1167068038216;41.5115895718732;40.9821406887103;40.9724706479303;40.3572685751828;39.8779433001052;40.8523153006594;43.4782648280148;46.1514165633422;51.1173397417285;59.1586834051362;63.8222944745662;64.9860662503273;68.09774394366831;63.3540045110797;62.8833170176386;63.6684950949253;61.9666887077676;62.2677836847414;63.582020518799;63.7412538286618;67.1728885787014;69.1240638051038;68.2678328545159;66.2320071591884;64.9379557107406;66.9499315721812;68.288600479504;68.7439476332636;69.3231332765677;69.8500899327105;68.66563066099511;69.50160418981601;69.596479219993;69.6746981329475;69.8776836020929;69.8129239020713;69.9633846068996;69.8356926516352;69.9605815921807;69.99484195273639;69.76728865106691;69.8972515280409;69.946697957835;69.8660412195262;69.8644375826603;69.5234982627379;64.634943151824;68.6108023038381;63.4034940082739;61.3828028681508;59.1949084097623;56.0993056497234;52.9563000761606;48.6600632149421;46.5811102623243;45.3740766116321;44.0924658888451;43.4590924152461;42.1678712337758;43.2439583256756;43.5724926564217;43.4993836022364;43.2285780638725;43.4716042905227;48.3773165515135;42.6594142234564;41.4769704966752;41.490023311183;40.1153820764336;39.439060283349;40.7167392521961;41.7807093964386;44.0168794632518;47.2964084120581;49.8703327366803;54.2578101978239;48.7811919622444;48.888182493106;47.7142112915798;46.8807887059169;46.4014281715362;46.2575661895888;46.9478486843666;50.2626308688873;50.659172156746;53.7892565325441;55.7629716999758;62.0428321692388;65.39425033502739;61.3094080047088;66.1398697765437;55.8306766985528;70];

    % AIW_data = [xRef, yRef, vRef];
    dBetweenPoints = (sqrt(diff(xRef).^2 + diff(yRef).^2));
    rollingDistance = [0; cumsum(dBetweenPoints)];
    dNew = (linspace(0, rollingDistance(end), 10000))';

    xInterp = interp1(rollingDistance, xRef, dNew, 'linear');
    yInterp = interp1(rollingDistance, yRef, dNew, 'linear');
    vInterp = interp1(rollingDistance, vRef, dNew, 'linear');

    AIW_data = [xInterp, yInterp, vInterp];

    xV = currentPosition(1);
    yV = currentPosition(2);

    % Find nearest AIW waypoint using Euclidean distance
    d = sqrt((AIW_data(:,1) - xV).^2 + (AIW_data(:,2) -yV).^2);
    [minDist, closestWaypointIdx] = min(d);

    closestWaypoint = [AIW_data(closestWaypointIdx, 1), AIW_data(closestWaypointIdx, 2)];
    xI = AIW_data(closestWaypointIdx, 1);
    yI = AIW_data(closestWaypointIdx, 2);

    if closestWaypointIdx ~= size(AIW_data, 1)
        xI_1 = AIW_data(closestWaypointIdx+1, 1);
        yI_1 = AIW_data(closestWaypointIdx+1, 2);
    else
        xI_1 = AIW_data(1, 1);
        yI_1 = AIW_data(1, 2);
    end

    % Segment between path points
    p = [xI_1 - xI; yI_1 - yI];

    % Vector from path to vehicle
    v = [xV - xI; yV - yI];

    % Projection of v onto p
    dotP = dot(p, v);
    pMagSquared = dot(p, p);
    proj_v_on_p = (dotP / pMagSquared) * p;

    % Calc residual vect
    residual = v - proj_v_on_p;

    % CTE
    CTE = norm(residual);

    % Get the sign of CTE
    crossProd = p(1) * v(2) - p(2) * v(1);
    if crossProd > 0

        CTE = CTE; % Left of path

    else

        CTE = -CTE; % Right of path

    end



    % Fetch ref vel
    refVel = AIW_data(closestWaypointIdx, 3);


end