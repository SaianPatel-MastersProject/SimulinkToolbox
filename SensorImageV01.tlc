%% Copyright (c) 2016-2020 rFpro Limited, All Rights Reserved.
%%
%% NOTICE:  All information contained herein is, and remains the property of rFpro. The intellectual and technical concepts contained
%% herein are proprietary to rFpro and may be covered by U.S. and foreign patents, patents in process, and are protected by trade secret or copyright law.
%% Dissemination of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained from rFpro.
%%
%% The copyright notice above does not evidence any actual or intended publication or disclosure of this source code, which includes information that is confidential
%% and/or proprietary, and is a trade secret, of rFpro.  ANY REPRODUCTION, DISTRIBUTION, PUBLIC PERFORMANCE, OR PUBLIC DISPLAY OF THIS SOURCE CODE
%% WITHOUT THE EXPRESS WRITTEN CONSENT OF RFPRO IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE LAWS AND INTERNATIONAL TREATIES.
%% THE RECEIPT OR POSSESSION OF THIS SOURCE CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS TO REPRODUCE,
%% DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT MAY DESCRIBE, IN WHOLE OR IN PART.

%implements SensorImageV01 "C"

%function BlockTypeSetup(block, system) Output
  %<LibAddToCommonIncludes("InternalsPluginExtras.hpp")>
  %openfile externs
    extern double mediaTime;
    extern const SensorImageInfoV01 *sensorImageInfo;
    extern int sensorImageFormat;
  %closefile externs
  %<LibCacheExtern(externs)>
%endfunction

%function Start(block, system) Output
    sensorImageFormat = %<LibBlockParameterValue(Format, 0)>;
%endfunction

%function Outputs(block, system) Output
{
  const long WIDTH = %<LibBlockParameterValue(Width, 0)> < sensorImageInfo->mWidth ? %<LibBlockParameterValue(Width, 0)> : sensorImageInfo->mWidth;
  const long HEIGHT = %<LibBlockParameterValue(Height, 0)> < sensorImageInfo->mHeight ? %<LibBlockParameterValue(Height, 0)> : sensorImageInfo->mHeight;
  const long rowOffset = sensorImageInfo->mBytesPerRow/sensorImageInfo->mBytesPerPixel;

  struct Pixel
  {
    %if LibBlockParameterValue(Format, 0) & 1
      SensorPixel_COLOR color;
    %elseif LibBlockParameterValue(Format, 0) & 2
      SensorPixel_COLOR_HDR color;
    %endif

    %if LibBlockParameterValue(Format, 0) & 4
      SensorPixel_RANGE range;
    %endif

    %if LibBlockParameterValue(Format, 0) & 8
      SensorPixel_ID id;
    %endif

    %if LibBlockParameterValue(Format, 0) & 16
      SensorPixel_COLOR segmented;
    %endif

    %if LibBlockParameterValue(Format, 0) & 32
      SensorPixel_VECTOR normal;
    %endif

    %if LibBlockParameterValue(Format, 0) & 64
      SensorPixel_VECTOR velocity;
    %endif

    %if LibBlockParameterValue(Format, 0) & 128
       SensorPixel_LIGHT light;
    %endif

    %if LibBlockParameterValue(Format, 0) & 256
       SensorPixel_ID material;
    %endif

    %if LibBlockParameterValue(Format, 0) & 512
       SensorPixel_ID fgt;
    %endif
  };

  %<LibBlockOutputSignal(0, "", "", 0)> = mediaTime;

  Pixel *buffer = reinterpret_cast<Pixel *>(sensorImageInfo->mData);

  for (long col=0; col<WIDTH; ++col)
  {
    for (long row=0; row<HEIGHT; ++row)
    {
      %if LibBlockParameterValue(Format, 0) & 3
        %<LibBlockOutputSignal(1, "(col*HEIGHT+row)", "", 0)> = buffer[col + row*rowOffset].color.red;
        %<LibBlockOutputSignal(1, "(col*HEIGHT+row) + HEIGHT*WIDTH", "", 0)> = buffer[col + row*rowOffset].color.green;
        %<LibBlockOutputSignal(1, "(col*HEIGHT+row) + 2*HEIGHT*WIDTH", "", 0)> = buffer[col + row*rowOffset].color.blue;
      %endif
      
      %if LibBlockParameterValue(Format, 0) & 4
        %<LibBlockOutputSignal(2, "col*HEIGHT+row", "", 0)> = buffer[col + row*rowOffset].range.range;
      %endif
      
      %if LibBlockParameterValue(Format, 0) & 8
        %<LibBlockOutputSignal(3, "col*HEIGHT+row", "", 0)> = buffer[col + row*rowOffset].id.id;
      %endif
      
      %if LibBlockParameterValue(Format, 0) & 16
        %<LibBlockOutputSignal(4, "(col*HEIGHT+row)", "", 0)> = buffer[col + row*rowOffset].segmented.red;
        %<LibBlockOutputSignal(4, "(col*HEIGHT+row) + HEIGHT*WIDTH", "", 0)> = buffer[col + row*rowOffset].segmented.green;
        %<LibBlockOutputSignal(4, "(col*HEIGHT+row) + 2*HEIGHT*WIDTH", "", 0)> = buffer[col + row*rowOffset].segmented.blue;
      %endif
      
      %if LibBlockParameterValue(Format, 0) & 32
        %<LibBlockOutputSignal(5, "(col*HEIGHT+row)", "", 0)> = buffer[col + row*rowOffset].normal.x;
        %<LibBlockOutputSignal(5, "(col*HEIGHT+row) + HEIGHT*WIDTH", "", 0)> = buffer[col + row*rowOffset].normal.y;
        %<LibBlockOutputSignal(5, "(col*HEIGHT+row) + 2*HEIGHT*WIDTH", "", 0)> = buffer[col + row*rowOffset].normal.z;
      %endif
      
      %if LibBlockParameterValue(Format, 0) & 64
        %<LibBlockOutputSignal(6, "(col*HEIGHT+row)", "", 0)> = buffer[col + row*rowOffset].velocity.x;
        %<LibBlockOutputSignal(6, "(col*HEIGHT+row) + HEIGHT*WIDTH", "", 0)> = buffer[col + row*rowOffset].velocity.y;
        %<LibBlockOutputSignal(6, "(col*HEIGHT+row) + 2*HEIGHT*WIDTH", "", 0)> = buffer[col + row*rowOffset].velocity.z;
      %endif

      %if LibBlockParameterValue(Format, 0) & 128
        %<LibBlockOutputSignal(7, "(col*HEIGHT+row)", "", 0)> = buffer[col + row*rowOffset].light.red;
        %<LibBlockOutputSignal(7, "(col*HEIGHT+row) + HEIGHT*WIDTH", "", 0)> = buffer[col + row*rowOffset].light.green;
        %<LibBlockOutputSignal(7, "(col*HEIGHT+row) + 2*HEIGHT*WIDTH", "", 0)> = buffer[col + row*rowOffset].light.blue;
      %endif

      %if LibBlockParameterValue(Format, 0) & 256
        %<LibBlockOutputSignal(8, "col*HEIGHT+row", "", 0)> = buffer[col + row*rowOffset].material.id;
      %endif

      %if LibBlockParameterValue(Format, 0) & 512
        %<LibBlockOutputSignal(9, "col*HEIGHT+row", "", 0)> = buffer[col + row*rowOffset].fgt.id;
      %endif
    }
  }
}
%endfunction
