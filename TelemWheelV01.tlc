%% Copyright (c) 2011-2018 Kangaloosh Ltd t/a rFpro, All Rights Reserved.
%%
%% NOTICE:  All information contained herein is, and remains the property of rFpro. The intellectual and technical concepts contained
%% herein are proprietary to rFpro and may be covered by U.S. and foreign patents, patents in process, and are protected by trade secret or copyright law.
%% Dissemination of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained from rFpro.
%%
%% The copyright notice above does not evidence any actual or intended publication or disclosure of this source code, which includes information that is confidential
%% and/or proprietary, and is a trade secret, of rFpro.  ANY REPRODUCTION, DISTRIBUTION, PUBLIC PERFORMANCE, OR PUBLIC DISPLAY OF THIS SOURCE CODE
%% WITHOUT THE EXPRESS WRITTEN CONSENT OF RFPRO IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE LAWS AND INTERNATIONAL TREATIES.
%% THE RECEIPT OR POSSESSION OF THIS SOURCE CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS TO REPRODUCE,
%% DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT MAY DESCRIBE, IN WHOLE OR IN PART.

%implements TelemWheelV01 "C"

%function BlockTypeSetup(block, system) Output
  %<LibAddToCommonIncludes("InternalsPlugin.hpp")>
  %openfile externs
    extern TelemInfoV01 simulinkInfo;
    extern bool wantsTelemetryUpdates;
  %closefile externs
  %<LibCacheExtern(externs)>
%endfunction

%function Start(block, system) Output
  wantsTelemetryUpdates = true;
%endfunction

%function Outputs(block, system) Output
%assign wheel_id = LibBlockParameterValue(P1, 0)-1
  %<LibBlockOutputSignal(  0, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mSuspensionDeflection;
  %<LibBlockOutputSignal(  1, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mRideHeight;
  %<LibBlockOutputSignal(  2, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mSuspForce;
  %<LibBlockOutputSignal(  3, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mBrakeTemp;
  %<LibBlockOutputSignal(  4, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mBrakePressure;
  %<LibBlockOutputSignal(  5, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mRotation;
  %<LibBlockOutputSignal(  6, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mLateralPatchVel;
  %<LibBlockOutputSignal(  7, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mLongitudinalPatchVel;
  %<LibBlockOutputSignal(  8, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mLateralGroundVel;
  %<LibBlockOutputSignal(  9, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mLongitudinalGroundVel;
  %<LibBlockOutputSignal( 10, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mCamber;
  %<LibBlockOutputSignal( 11, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mLateralForce;
  %<LibBlockOutputSignal( 12, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mLongitudinalForce;
  %<LibBlockOutputSignal( 13, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mTireLoad;
  %<LibBlockOutputSignal( 14, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mGripFract;
  %<LibBlockOutputSignal( 15, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mPressure;

  %<LibBlockOutputSignal( 16, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mTemperature[0];
  %<LibBlockOutputSignal( 16, "", "", 1)> = simulinkInfo.mWheel[(int)%<wheel_id>].mTemperature[1];
  %<LibBlockOutputSignal( 16, "", "", 2)> = simulinkInfo.mWheel[(int)%<wheel_id>].mTemperature[2];

  %<LibBlockOutputSignal( 17, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mWear;
  strncpy((char *)%<LibBlockOutputSignalAddr(18, "", "", 0)>, simulinkInfo.mWheel[(int)%<wheel_id>].mTerrainName, 16);
  %<LibBlockOutputSignal( 19, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mSurfaceType;
  %<LibBlockOutputSignal( 20, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mFlat;
  %<LibBlockOutputSignal( 21, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mDetached;
  %<LibBlockOutputSignal( 22, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mVerticalTireDeflection;
  %<LibBlockOutputSignal( 23, "", "", 0)> = simulinkInfo.mWheel[(int)%<wheel_id>].mWheelYLocation;
  %% mExpansion
  {
    double *mToeAngle = (double *)&simulinkInfo.mWheel[(int)%<wheel_id>].mExpansion[0];
    %<LibBlockOutputSignal( 24, "", "", 0)> = *mToeAngle;
  }

%endfunction
